package components

type ChartData struct {
	Labels []string `json:"labels"`
	Values []int    `json:"values"`
}

type TimelinePageModel struct {
  Type                  string    `json:"type"`
	UserProfilePictureURL string    `json:"userProfilePictureURL"`
	TopVTubers            ChartData `json:"topVtubers"`
	Timeline              ChartData `json:"timeline"`
}

templ TimelinePage(model TimelinePageModel) {	
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>OshiStats</title>
      <link rel="icon" type="image/png" href="/static/icon-64.png">
      <link rel="stylesheet" href="/static/tailwind.css">
      <script src="/static/htmx.min.js"></script>
      <script src="/static/echarts.min.js"></script>
    </head>
    <body class="min-h-screen bg-gradient-to-br from-neutral-800 via-neutral-900 to-neutral-800">
      <header class="bg-neutral-900 border-b border-neutral-700">
        <div class="container mx-auto flex items-center justify-between px-6 py-4">
          <a href="/" class="flex items-center gap-4">
            <img src="/static/icon-240.png" alt="OshiStats Icon" class="w-10 h-10 rounded">
            <div class="select-none font-semibold">
              <h2 class="text-neutral-200 mb-0 text-sm/4">Botsu</h2>
              <h1 class="text-white text-xl/6">OshiStats</h1>
            </div>
          </a>
          if model.UserProfilePictureURL != "" {
            <img src={model.UserProfilePictureURL} alt="Profile" class="w-10 h-10 rounded-full border border-neutral-600 shadow-sm">
          }
        </div>
      </header>
      <main class="container mx-auto p-6">
        <section class="bg-white/10 border border-white/20 shadow-lg rounded-xl overflow-hidden p-4 flex flex-col items-center transition-transform">
          <div id="timeline-chart" class="w-full h-96"></div>
          <script type="text/javascript">
            (function() {
              const timelineChart = echarts.init(document.getElementById('timeline-chart'));
              window.addEventListener('resize', function() {
                timelineChart.resize();
              });
              const option = {
                darkMode: true,
                backgroundColor: 'transparent',
                title: {
                  left: 'center',
                },
                xAxis: {
                  data: {{ model.Timeline.Labels }}
                },
                yAxis: {},
                series: [
                  {
                    name: 'duration',
                    type: 'bar',
                    data: {{ model.Timeline.Values }}
                  }
                ]
              };
              timelineChart.setOption(option);
            })();
          </script>
          <div id="vtuber-chart" class="w-full h-96"></div>
          <script type="text/javascript">
            (function() {
              const timelineChart = echarts.init(document.getElementById('vtuber-chart'));
              window.addEventListener('resize', function() {
                timelineChart.resize();
              });
              const option = {
                darkMode: true,
                backgroundColor: 'transparent',
                title: {
                  left: 'center',
                },
                series: {
                  type: 'pie',
                  data: []
                }
              };
              const labels = {{ model.TopVTubers.Labels }};
              const values = {{ model.TopVTubers.Values }};
              for (let i = 0; i < labels.length; i++) {
                option.series.data.push({
                  name: labels[i],
                  value: values[i],
                }); 
              }
              timelineChart.setOption(option);
            })();
          </script>
        </section>
      </main>
    </body>
  </html>
}

