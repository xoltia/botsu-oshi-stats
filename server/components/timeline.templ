package components

import "time"

type ChartData struct {
	Labels []string `json:"labels"`
	Values []int    `json:"values"`
}

type TopVTuberWithAppearances struct {
  TopVTuber
  Appearances int
}

type TopVTuberWithDuration struct {
  TopVTuber
  Duration time.Duration
}

type TimelinePageModel struct {
  Type                  string
	UserProfilePictureURL string
	TopVTubersAppearances []TopVTuberWithAppearances
	TopVTubersDuration    []TopVTuberWithDuration
	Timeline              ChartData
}

templ TimelinePage(model TimelinePageModel) {	
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>OshiStats</title>
      <link rel="icon" type="image/png" href="/static/icon-64.png">
      <link rel="stylesheet" href="/static/tailwind.css">
      <script src="/static/htmx.min.js"></script>
      <script src="/static/chartjs.min.js"></script>
    </head>
    <body class="min-h-screen bg-gradient-to-br from-neutral-800 via-neutral-900 to-neutral-800">
      <header class="bg-neutral-900 border-b border-neutral-700">
        <div class="container mx-auto flex items-center justify-between px-6 py-4">
          <a href="/" class="flex items-center gap-4">
            <img src="/static/icon-240.png" alt="OshiStats Icon" class="w-10 h-10 rounded">
            <div class="select-none font-semibold">
              <h2 class="text-neutral-200 mb-0 text-sm/4">Botsu</h2>
              <h1 class="text-white text-xl/6">OshiStats</h1>
            </div>
          </a>
          if model.UserProfilePictureURL != "" {
            <img src={model.UserProfilePictureURL} alt="Profile" class="w-10 h-10 rounded-full border border-neutral-600 shadow-sm" />
          }
        </div>
      </header>
      <main class="container mx-auto p-1 md:p-6 text-white">
        <section class="px-2 py-4 md:flex justify-center space-x-4">
          <div class="my-4">
            <h2 class="text-2xl font-bold mb-4">Top By Appearances</h2>
            <ul class="gap-4 grid grid-cols-2">
              for _, v := range model.TopVTubersAppearances {
                <li class="flex items-center h-full">
                  <img src={v.AvatarURL} alt={v.Name} class="w-10 h-10 rounded-full ml-2 mr-4 object-cover" />
                  <div>
                    <div class="text-neutral-100">{v.Name}</div>
                    <div class="text-neutral-300 italic text-sm">{v.Appearances} videos</div>
                  </div>
                </li>
              }
            </ul>
          </div>
          <div class="my-4">
            <h2 class="text-2xl font-bold mb-4">Top By Duration</h2>
            <ul class="gap-4 grid grid-cols-2">
              for _, v := range model.TopVTubersDuration {
                <li class="flex items-center h-full">
                  <img src={v.AvatarURL} alt={v.Name} class="w-10 h-10 rounded-full ml-2 mr-4 object-cover" />
                  <div>
                    <div class="text-neutral-100">{v.Name}</div>
                    <div class="text-neutral-300 italic text-sm">{v.Duration.Truncate(time.Second).String()}</div>
                  </div>
                </li>
              }
            </ul>
          </div>
        </section>
        <section class="px-2 lg:items-center flex flex-col">
          <h2 class="text-2xl font-bold mb-4">Total Watch Time</h2>
          <div class="w-full lg:w-300 h-96 flex flex-col items-center">
            <canvas id="timeline-chart"></canvas>
          </div>
          <script>
            (function() {
              const formatMinutes = (m) => m >= 60 ?
                `${(m/60).toFixed(1)}h` :
                `${m}m`;
              const ctx = document.getElementById('timeline-chart');
              new Chart(ctx, {
                type: 'bar',
                data: {
                  labels: {{ model.Timeline.Labels }},
                  datasets: [{
                    data: {{ model.Timeline.Values }},
                    borderWidth: 1,
                    backgroundColor: '#dc2626',
                  }]
                },
                options: {
                  scales: {
                    y: {
                      grid: {
                        color: 'oklch(26.8% 0.007 34.298)'
                      },
                      ticks: {
                        callback: function(value, index, ticks) {
                          return formatMinutes(value);
                        }
                      },
                    },
                    x: {
                      grid: {
                        color: 'oklch(26.8% 0.007 34.298)'
                      }
                    }
                  },
                  plugins: {
                    legend: {
                      display: false
                    },
                    tooltip: {
                      callbacks: {
                        label: function(context) {
                          return formatMinutes(context.parsed.y);
                        }
                      }
                    }
                  }
                }
              });
            })();
          </script>
        </section>
      </main>
    </body>
  </html>
}

